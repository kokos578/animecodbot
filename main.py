import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
import os
TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ö–∞–Ω–∞–ª—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏—á–Ω—ã–µ)
CHANNELS = [
    {"id": "@hotlentaa", "url": "https://t.me/+O2MCfpvdcb1lOTli"},
    {"id": "@rrreportt", "url": "https://t.me/+QvVBN6D7zHI4M2My"},
    {"id": "@gamelivenew", "url": "https://t.me/+In753IkOfJMwNGYy"},
    {"id": "@perezagryzska", "url": "https://t.me/+HJnx3PMd0xM5YTk6"},
    {"id": "@focustgg", "url": "https://t.me/+0xkYGnZLk5sxZGVi"},
]

# –ö–æ–¥—ã ‚Üí —Ñ–∏–ª—å–º—ã
CODES = {
    "501": "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ",
    "502": "–ù–∞—á–∞–ª–æ",
    "503": "–ú–∞—Ç—Ä–∏—Ü–∞",
    "504": "–¢–∏—Ç–∞–Ω–∏–∫",
    "505": "–ê–≤–∞—Ç–∞—Ä",
    "506": "–î–∂–æ–∫–µ—Ä",
    "507": "–ù–∞—á–∞–ª–æ",
    "508": "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä"
}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keyboard = [[{"text": "üîç –ù–∞–π—Ç–∏ –∞–Ω–∏–º–µ", "callback_data": "check_sub"}]]
    reply_markup = {"inline_keyboard": keyboard}
    await update.message.reply_text(
        f"üé¨ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–£–≤–∏–¥–µ–ª —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤ TikTok?\n"
        "–í–≤–µ–¥–∏ **–∫–æ–¥ –∏–∑ –≤–∏–¥–µ–æ**, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∞–Ω–∏–º–µ.\n\n"
        "–ù–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ üòâ",
        reply_markup=reply_markup
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    for channel in CHANNELS:
        try:
            member = await context.bot.get_chat_member(chat_id=channel["id"], user_id=user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                return False
        except:
            return False
    return True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if await check_subscription(user_id, context):
        await query.edit_message_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ **–∫–æ–¥ –∏–∑ TikTok-–≤–∏–¥–µ–æ**, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∞–Ω–∏–º–µ."
        )
        context.user_data['allowed'] = True
    else:
        buttons = [
            [{"text": "üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "url": ch["url"]}] for ch in CHANNELS
        ]
        buttons.append([{"text": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "check_sub"}])
        reply_markup = {"inline_keyboard": buttons}
        await query.edit_message_text(
            "‚ùå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('allowed', False):
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã! –ù–∞–∂–º–∏ /start"
        )
        return

    code = update.message.text.strip().upper()
    if code in CODES:
        film = CODES[code]
        await update.message.reply_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n\n"
            f"üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –ø–æ –∫–æ–¥—É `{code}` ‚Äî —ç—Ç–æ:\n\n"
            f"üìå *{film}*\n\n"
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ç—ã –µ–≥–æ –ø–µ—Ä–µ–ø–∏—Å–∞–ª –∏–∑ –≤–∏–¥–µ–æ."
        )

# –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == '__main__':
    main()
